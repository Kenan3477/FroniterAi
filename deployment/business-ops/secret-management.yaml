# Business Operations Secret Management Configuration

apiVersion: v1
kind: Namespace
metadata:
  name: business-ops-secrets
  labels:
    name: business-ops-secrets
    component: security
    pod-security.kubernetes.io/enforce: restricted

---
# External Secrets Operator Configuration for AWS Secrets Manager
apiVersion: external-secrets.io/v1beta1
kind: SecretStore
metadata:
  name: aws-secrets-manager
  namespace: business-ops
  labels:
    provider: aws
    component: secrets
spec:
  provider:
    aws:
      service: SecretsManager
      region: us-west-2
      auth:
        jwt:
          serviceAccountRef:
            name: external-secrets-sa

---
# External Secrets for Database Credentials
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: business-ops-database-secret
  namespace: business-ops
  labels:
    app: business-ops
    component: database-secrets
spec:
  refreshInterval: 15m
  secretStoreRef:
    name: aws-secrets-manager
    kind: SecretStore
  target:
    name: business-ops-db-secrets
    creationPolicy: Owner
    template:
      type: Opaque
      data:
        username: "{{ .username }}"
        password: "{{ .password }}"
        database-url: "postgresql://{{ .username }}:{{ .password }}@business-ops-database:5432/business_ops?sslmode=require"
        backup-url: "postgresql://{{ .username }}:{{ .password }}@business-ops-database:5432/business_ops"
        migration-url: "postgresql://{{ .username }}:{{ .password }}@business-ops-database:5432/business_ops?sslmode=require"
  data:
    - secretKey: username
      remoteRef:
        key: business-ops/database
        property: username
    - secretKey: password
      remoteRef:
        key: business-ops/database
        property: password

---
# External Secrets for Redis Credentials
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: business-ops-redis-secret
  namespace: business-ops
  labels:
    app: business-ops
    component: redis-secrets
spec:
  refreshInterval: 15m
  secretStoreRef:
    name: aws-secrets-manager
    kind: SecretStore
  target:
    name: business-ops-redis-secrets
    creationPolicy: Owner
    template:
      type: Opaque
      data:
        password: "{{ .password }}"
        redis-url: "redis://:{{ .password }}@business-ops-redis:6379/0"
  data:
    - secretKey: password
      remoteRef:
        key: business-ops/redis
        property: password

---
# External Secrets for API Keys and JWT
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: business-ops-api-secrets
  namespace: business-ops
  labels:
    app: business-ops
    component: api-secrets
spec:
  refreshInterval: 15m
  secretStoreRef:
    name: aws-secrets-manager
    kind: SecretStore
  target:
    name: business-ops-api-secrets
    creationPolicy: Owner
    template:
      type: Opaque
      data:
        jwt-secret: "{{ .jwt_secret }}"
        encryption-key: "{{ .encryption_key }}"
        api-key-financial-data: "{{ .financial_data_api_key }}"
        api-key-market-data: "{{ .market_data_api_key }}"
        api-key-compliance: "{{ .compliance_api_key }}"
        webhook-secret: "{{ .webhook_secret }}"
  data:
    - secretKey: jwt_secret
      remoteRef:
        key: business-ops/api
        property: jwt_secret
    - secretKey: encryption_key
      remoteRef:
        key: business-ops/api
        property: encryption_key
    - secretKey: financial_data_api_key
      remoteRef:
        key: business-ops/external-apis
        property: financial_data_api_key
    - secretKey: market_data_api_key
      remoteRef:
        key: business-ops/external-apis
        property: market_data_api_key
    - secretKey: compliance_api_key
      remoteRef:
        key: business-ops/external-apis
        property: compliance_api_key
    - secretKey: webhook_secret
      remoteRef:
        key: business-ops/webhooks
        property: secret

---
# External Secrets for SSL/TLS Certificates
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: business-ops-ssl-certs
  namespace: business-ops
  labels:
    app: business-ops
    component: ssl-certs
spec:
  refreshInterval: 24h
  secretStoreRef:
    name: aws-secrets-manager
    kind: SecretStore
  target:
    name: business-ops-ssl-certs
    creationPolicy: Owner
    template:
      type: kubernetes.io/tls
      data:
        tls.crt: "{{ .certificate }}"
        tls.key: "{{ .private_key }}"
        ca.crt: "{{ .ca_certificate }}"
  data:
    - secretKey: certificate
      remoteRef:
        key: business-ops/ssl
        property: certificate
    - secretKey: private_key
      remoteRef:
        key: business-ops/ssl
        property: private_key
    - secretKey: ca_certificate
      remoteRef:
        key: business-ops/ssl
        property: ca_certificate

---
# Vault Configuration for Advanced Secret Management
apiVersion: v1
kind: ConfigMap
metadata:
  name: vault-config
  namespace: business-ops-secrets
  labels:
    app: vault
    component: config
data:
  vault.hcl: |
    ui = true
    
    listener "tcp" {
      address     = "0.0.0.0:8200"
      tls_cert_file = "/vault/tls/tls.crt"
      tls_key_file  = "/vault/tls/tls.key"
    }
    
    storage "postgresql" {
      connection_url = "postgres://vault:vaultpassword@vault-postgres:5432/vault?sslmode=require"
      table          = "vault_kv_store"
      max_parallel   = "128"
    }
    
    seal "awskms" {
      region     = "us-west-2"
      kms_key_id = "arn:aws:kms:us-west-2:123456789012:key/12345678-1234-1234-1234-123456789012"
    }
    
    api_addr = "https://vault.business-ops.svc.cluster.local:8200"
    cluster_addr = "https://vault.business-ops.svc.cluster.local:8201"

---
# Vault Policy for Business Operations
apiVersion: v1
kind: ConfigMap
metadata:
  name: vault-policies
  namespace: business-ops-secrets
  labels:
    app: vault
    component: policies
data:
  business-ops-policy.hcl: |
    # Business Operations Service Policy
    path "secret/data/business-ops/*" {
      capabilities = ["read"]
    }
    
    path "database/creds/business-ops-readonly" {
      capabilities = ["read"]
    }
    
    path "database/creds/business-ops-readwrite" {
      capabilities = ["read"]
    }
    
    path "pki/issue/business-ops" {
      capabilities = ["create", "update"]
    }
    
    # Financial data encryption keys
    path "transit/encrypt/financial-data" {
      capabilities = ["create", "update"]
    }
    
    path "transit/decrypt/financial-data" {
      capabilities = ["create", "update"]
    }

  compliance-policy.hcl: |
    # Compliance Service Policy
    path "secret/data/compliance/*" {
      capabilities = ["read"]
    }
    
    path "audit/*" {
      capabilities = ["read", "list"]
    }
    
    # Read-only access to all business ops secrets for compliance
    path "secret/data/business-ops/*" {
      capabilities = ["read", "list"]
    }

---
# Service Account for External Secrets
apiVersion: v1
kind: ServiceAccount
metadata:
  name: external-secrets-sa
  namespace: business-ops
  labels:
    app: external-secrets
  annotations:
    eks.amazonaws.com/role-arn: arn:aws:iam::123456789012:role/BusinessOpsExternalSecretsRole

---
# ClusterRole for External Secrets
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: external-secrets-controller
  labels:
    app: external-secrets
rules:
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get", "list", "create", "update", "patch", "delete"]
  - apiGroups: ["external-secrets.io"]
    resources: ["externalsecrets", "secretstores", "clustersecretstores"]
    verbs: ["get", "list", "watch"]

---
# ClusterRoleBinding for External Secrets
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: external-secrets-controller
  labels:
    app: external-secrets
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: external-secrets-controller
subjects:
  - kind: ServiceAccount
    name: external-secrets-sa
    namespace: business-ops

---
# Sealed Secrets for Kubernetes-native Secret Management
apiVersion: bitnami.com/v1alpha1
kind: SealedSecret
metadata:
  name: business-ops-sealed-secrets
  namespace: business-ops
  labels:
    app: business-ops
    component: sealed-secrets
spec:
  encryptedData:
    # These would be encrypted by the sealed-secrets controller
    # Example: kubeseal --format=yaml --cert=public-key-cert.pem
    admin-password: AgBy3i4OJSWK+PiTySYZZA9rO43cGDEQAM...
    webhook-token: AgCKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKK...
  template:
    metadata:
      name: business-ops-internal-secrets
      namespace: business-ops
    type: Opaque

---
# Network Policy for Secret Access
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: secrets-network-policy
  namespace: business-ops
  labels:
    component: security
spec:
  podSelector:
    matchLabels:
      component: secrets
  policyTypes:
    - Ingress
    - Egress
  ingress:
    # Only allow access from business ops pods
    - from:
        - podSelector:
            matchLabels:
              app: business-ops-api
        - podSelector:
            matchLabels:
              app: business-ops-ml
      ports:
        - protocol: TCP
          port: 8200
  egress:
    # Allow access to AWS Secrets Manager
    - to: []
      ports:
        - protocol: TCP
          port: 443
    # Allow access to database for vault storage
    - to:
        - podSelector:
            matchLabels:
              app: vault-postgres
      ports:
        - protocol: TCP
          port: 5432

---
# Pod Security Policy for Secrets
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: business-ops-secrets-psp
  labels:
    component: security
spec:
  privileged: false
  allowPrivilegeEscalation: false
  requiredDropCapabilities:
    - ALL
  volumes:
    - 'configMap'
    - 'emptyDir'
    - 'projected'
    - 'secret'
    - 'downwardAPI'
    - 'persistentVolumeClaim'
  runAsUser:
    rule: 'MustRunAsNonRoot'
  seLinux:
    rule: 'RunAsAny'
  fsGroup:
    rule: 'RunAsAny'

---
# Secret Rotation CronJob
apiVersion: batch/v1
kind: CronJob
metadata:
  name: secret-rotation
  namespace: business-ops-secrets
  labels:
    app: secret-rotation
    component: security
spec:
  schedule: "0 3 1 * *"  # Monthly on the 1st at 3 AM
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            app: secret-rotation
        spec:
          serviceAccountName: secret-rotation-sa
          restartPolicy: OnFailure
          containers:
            - name: rotate-secrets
              image: frontier/secret-rotation:latest
              command:
                - python
                - /app/rotate_secrets.py
              env:
                - name: AWS_REGION
                  value: "us-west-2"
                - name: NAMESPACE
                  value: "business-ops"
                - name: DRY_RUN
                  value: "false"
              resources:
                requests:
                  cpu: 100m
                  memory: 128Mi
                limits:
                  cpu: 200m
                  memory: 256Mi
              securityContext:
                runAsNonRoot: true
                runAsUser: 65534
                allowPrivilegeEscalation: false
                readOnlyRootFilesystem: true
                capabilities:
                  drop:
                    - ALL

---
# Service Account for Secret Rotation
apiVersion: v1
kind: ServiceAccount
metadata:
  name: secret-rotation-sa
  namespace: business-ops-secrets
  labels:
    app: secret-rotation
  annotations:
    eks.amazonaws.com/role-arn: arn:aws:iam::123456789012:role/SecretRotationRole

---
# RBAC for Secret Rotation
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: secret-rotation
  namespace: business-ops
rules:
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get", "list", "create", "update", "patch"]
  - apiGroups: ["external-secrets.io"]
    resources: ["externalsecrets"]
    verbs: ["get", "list", "patch"]
  - apiGroups: ["apps"]
    resources: ["deployments", "statefulsets"]
    verbs: ["get", "list", "patch"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: secret-rotation
  namespace: business-ops
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: secret-rotation
subjects:
  - kind: ServiceAccount
    name: secret-rotation-sa
    namespace: business-ops-secrets

---
# Secret Monitoring and Alerting
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: secret-expiration-monitor
  namespace: business-ops-secrets
  labels:
    app: secret-monitor
    component: monitoring
spec:
  selector:
    matchLabels:
      app: secret-exporter
  endpoints:
    - port: metrics
      interval: 60s
      path: /metrics

---
# Certificate Manager Issuer for Internal Certificates
apiVersion: cert-manager.io/v1
kind: Issuer
metadata:
  name: business-ops-ca-issuer
  namespace: business-ops
  labels:
    component: certificates
spec:
  ca:
    secretName: business-ops-ca-secret

---
# Certificate for Internal Services
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: business-ops-internal-tls
  namespace: business-ops
  labels:
    component: certificates
spec:
  secretName: business-ops-internal-tls
  issuerRef:
    name: business-ops-ca-issuer
    kind: Issuer
  dnsNames:
    - business-ops-api.business-ops.svc.cluster.local
    - business-ops-database.business-ops.svc.cluster.local
    - business-ops-redis.business-ops.svc.cluster.local
  duration: 8760h  # 1 year
  renewBefore: 720h  # 30 days
