# Jenkins Pipeline Configuration for Frontier

pipeline {
    agent any
    
    environment {
        // AWS Configuration
        AWS_REGION = 'us-west-2'
        AWS_ACCOUNT_ID = '123456789012'
        ECR_REPOSITORY = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com"
        
        // Application Configuration
        APP_NAME = 'frontier'
        BUILD_NUMBER = "${env.BUILD_NUMBER}"
        GIT_COMMIT_SHORT = "${env.GIT_COMMIT?.take(7)}"
        IMAGE_TAG = "${BUILD_NUMBER}-${GIT_COMMIT_SHORT}"
        
        // Kubernetes Configuration
        KUBECONFIG = credentials('kubeconfig')
        KUBECTL_VERSION = '1.28.0'
        
        // Notification Configuration
        SLACK_CHANNEL = '#deployments'
        SLACK_CREDENTIALS = 'slack-webhook'
        
        // Security Scanning
        TRIVY_VERSION = '0.45.0'
        SONAR_TOKEN = credentials('sonar-token')
        
        // Environment Detection
        TARGET_ENV = "${env.BRANCH_NAME == 'main' ? 'prod' : env.BRANCH_NAME == 'develop' ? 'staging' : 'dev'}"
        KUBERNETES_NAMESPACE = "${TARGET_ENV == 'prod' ? 'frontier' : 'frontier-' + TARGET_ENV}"
    }
    
    options {
        buildDiscarder(logRotator(numToKeepStr: '10'))
        timeout(time: 60, unit: 'MINUTES')
        timestamps()
        ansiColor('xterm')
    }
    
    triggers {
        githubPush()
        cron(env.BRANCH_NAME == 'main' ? 'H 2 * * *' : '')
    }
    
    stages {
        stage('Preparation') {
            steps {
                script {
                    // Clean workspace
                    cleanWs()
                    
                    // Checkout code
                    checkout scm
                    
                    // Set build description
                    currentBuild.description = "Branch: ${env.BRANCH_NAME}, Env: ${TARGET_ENV}"
                    
                    // Send start notification
                    slackSend(
                        channel: SLACK_CHANNEL,
                        color: 'good',
                        message: ":rocket: Starting build for ${APP_NAME} - Branch: ${env.BRANCH_NAME} (${TARGET_ENV})"
                    )
                }
            }
        }
        
        stage('Environment Setup') {
            parallel {
                stage('Install Dependencies') {
                    steps {
                        script {
                            // Install Python dependencies
                            sh '''
                                python3 -m venv venv
                                source venv/bin/activate
                                pip install --upgrade pip
                                pip install -r requirements.txt
                                pip install -r requirements-dev.txt
                            '''
                            
                            // Install Node.js dependencies
                            sh '''
                                cd frontend
                                npm ci
                            '''
                        }
                    }
                }
                
                stage('Setup Tools') {
                    steps {
                        script {
                            // Install kubectl
                            sh """
                                curl -LO "https://dl.k8s.io/release/v${KUBECTL_VERSION}/bin/linux/amd64/kubectl"
                                chmod +x kubectl
                                sudo mv kubectl /usr/local/bin/
                            """
                            
                            // Install Trivy
                            sh """
                                wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
                                echo "deb https://aquasecurity.github.io/trivy-repo/deb generic main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
                                sudo apt-get update
                                sudo apt-get install trivy
                            """
                            
                            // Install Helm
                            sh '''
                                curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
                            '''
                        }
                    }
                }
            }
        }
        
        stage('Code Quality & Security') {
            parallel {
                stage('Unit Tests') {
                    steps {
                        script {
                            // Python tests
                            sh '''
                                source venv/bin/activate
                                python -m pytest tests/ --cov=app --cov-report=xml --cov-report=html --junitxml=pytest-report.xml
                            '''
                            
                            // JavaScript tests
                            sh '''
                                cd frontend
                                npm test -- --coverage --watchAll=false --testResultsProcessor=jest-junit
                            '''
                        }
                    }
                    post {
                        always {
                            // Publish test results
                            publishTestResults(
                                testResultsPattern: '**/pytest-report.xml,**/junit.xml',
                                allowEmptyResults: false
                            )
                            
                            // Publish coverage
                            publishCoverage(
                                adapters: [
                                    cobertura('coverage.xml'),
                                    istanbulCoberturaAdapter('frontend/coverage/cobertura-coverage.xml')
                                ],
                                sourceFileResolver: sourceFiles('STORE_LAST_BUILD')
                            )
                        }
                    }
                }
                
                stage('Linting') {
                    steps {
                        script {
                            // Python linting
                            sh '''
                                source venv/bin/activate
                                flake8 app/ --output-file=flake8-report.txt || true
                                pylint app/ --output-format=parseable --reports=no > pylint-report.txt || true
                                black --check app/ || true
                                isort --check-only app/ || true
                            '''
                            
                            // JavaScript linting
                            sh '''
                                cd frontend
                                npm run lint -- --format=checkstyle --output-file=eslint-report.xml || true
                            '''
                        }
                    }
                    post {
                        always {
                            // Archive lint reports
                            archiveArtifacts(
                                artifacts: '**/flake8-report.txt,**/pylint-report.txt,**/eslint-report.xml',
                                allowEmptyArchive: true
                            )
                        }
                    }
                }
                
                stage('Security Scanning') {
                    steps {
                        script {
                            // Dependency vulnerability scan
                            sh '''
                                source venv/bin/activate
                                safety check --json --output safety-report.json || true
                            '''
                            
                            // JavaScript security audit
                            sh '''
                                cd frontend
                                npm audit --audit-level moderate --json > npm-audit-report.json || true
                            '''
                            
                            // SAST scanning with Bandit
                            sh '''
                                source venv/bin/activate
                                bandit -r app/ -f json -o bandit-report.json || true
                            '''
                        }
                    }
                    post {
                        always {
                            archiveArtifacts(
                                artifacts: '**/safety-report.json,**/npm-audit-report.json,**/bandit-report.json',
                                allowEmptyArchive: true
                            )
                        }
                    }
                }
                
                stage('SonarQube Analysis') {
                    when {
                        anyOf {
                            branch 'main'
                            branch 'develop'
                            changeRequest()
                        }
                    }
                    steps {
                        script {
                            withSonarQubeEnv('SonarQube') {
                                sh '''
                                    sonar-scanner \
                                        -Dsonar.projectKey=frontier \
                                        -Dsonar.sources=. \
                                        -Dsonar.host.url=$SONAR_HOST_URL \
                                        -Dsonar.login=$SONAR_TOKEN \
                                        -Dsonar.python.coverage.reportPaths=coverage.xml \
                                        -Dsonar.javascript.lcov.reportPaths=frontend/coverage/lcov.info
                                '''
                            }
                            
                            // Wait for quality gate
                            timeout(time: 5, unit: 'MINUTES') {
                                def qg = waitForQualityGate()
                                if (qg.status != 'OK') {
                                    error "Pipeline aborted due to quality gate failure: ${qg.status}"
                                }
                            }
                        }
                    }
                }
            }
        }
        
        stage('Build Images') {
            when {
                anyOf {
                    branch 'main'
                    branch 'develop'
                    expression { env.BRANCH_NAME ==~ /^feature\/.*/ }
                }
            }
            parallel {
                stage('Build API Image') {
                    steps {
                        script {
                            sh """
                                docker build \
                                    --build-arg BUILD_DATE=\$(date -u +'%Y-%m-%dT%H:%M:%SZ') \
                                    --build-arg VERSION=${IMAGE_TAG} \
                                    --build-arg VCS_REF=${env.GIT_COMMIT} \
                                    -t ${ECR_REPOSITORY}/frontier-api:${IMAGE_TAG} \
                                    -t ${ECR_REPOSITORY}/frontier-api:latest \
                                    -f backend/Dockerfile \
                                    backend/
                            """
                        }
                    }
                }
                
                stage('Build Web Image') {
                    steps {
                        script {
                            sh """
                                docker build \
                                    --build-arg BUILD_DATE=\$(date -u +'%Y-%m-%dT%H:%M:%SZ') \
                                    --build-arg VERSION=${IMAGE_TAG} \
                                    --build-arg VCS_REF=${env.GIT_COMMIT} \
                                    --build-arg REACT_APP_API_URL=\${TARGET_ENV == 'prod' ? 'https://api.frontier.com' : 'https://api-' + TARGET_ENV + '.frontier.com'} \
                                    -t ${ECR_REPOSITORY}/frontier-web:${IMAGE_TAG} \
                                    -t ${ECR_REPOSITORY}/frontier-web:latest \
                                    -f frontend/Dockerfile \
                                    frontend/
                            """
                        }
                    }
                }
                
                stage('Build ML Image') {
                    steps {
                        script {
                            sh """
                                docker build \
                                    --build-arg BUILD_DATE=\$(date -u +'%Y-%m-%dT%H:%M:%SZ') \
                                    --build-arg VERSION=${IMAGE_TAG} \
                                    --build-arg VCS_REF=${env.GIT_COMMIT} \
                                    -t ${ECR_REPOSITORY}/frontier-ml:${IMAGE_TAG} \
                                    -t ${ECR_REPOSITORY}/frontier-ml:latest \
                                    -f ml-service/Dockerfile \
                                    ml-service/
                            """
                        }
                    }
                }
            }
        }
        
        stage('Security Scan Images') {
            when {
                anyOf {
                    branch 'main'
                    branch 'develop'
                    expression { env.BRANCH_NAME ==~ /^feature\/.*/ }
                }
            }
            parallel {
                stage('Scan API Image') {
                    steps {
                        script {
                            sh """
                                trivy image \
                                    --format json \
                                    --output trivy-api-report.json \
                                    --severity HIGH,CRITICAL \
                                    ${ECR_REPOSITORY}/frontier-api:${IMAGE_TAG}
                            """
                        }
                    }
                }
                
                stage('Scan Web Image') {
                    steps {
                        script {
                            sh """
                                trivy image \
                                    --format json \
                                    --output trivy-web-report.json \
                                    --severity HIGH,CRITICAL \
                                    ${ECR_REPOSITORY}/frontier-web:${IMAGE_TAG}
                            """
                        }
                    }
                }
                
                stage('Scan ML Image') {
                    steps {
                        script {
                            sh """
                                trivy image \
                                    --format json \
                                    --output trivy-ml-report.json \
                                    --severity HIGH,CRITICAL \
                                    ${ECR_REPOSITORY}/frontier-ml:${IMAGE_TAG}
                            """
                        }
                    }
                }
            }
            post {
                always {
                    archiveArtifacts(
                        artifacts: '**/trivy-*-report.json',
                        allowEmptyArchive: true
                    )
                }
            }
        }
        
        stage('Push Images') {
            when {
                anyOf {
                    branch 'main'
                    branch 'develop'
                }
            }
            steps {
                script {
                    // Login to ECR
                    sh """
                        aws ecr get-login-password --region ${AWS_REGION} | \
                        docker login --username AWS --password-stdin ${ECR_REPOSITORY}
                    """
                    
                    // Push images
                    sh """
                        docker push ${ECR_REPOSITORY}/frontier-api:${IMAGE_TAG}
                        docker push ${ECR_REPOSITORY}/frontier-api:latest
                        
                        docker push ${ECR_REPOSITORY}/frontier-web:${IMAGE_TAG}
                        docker push ${ECR_REPOSITORY}/frontier-web:latest
                        
                        docker push ${ECR_REPOSITORY}/frontier-ml:${IMAGE_TAG}
                        docker push ${ECR_REPOSITORY}/frontier-ml:latest
                    """
                }
            }
        }
        
        stage('Deploy to Staging') {
            when {
                branch 'develop'
            }
            steps {
                script {
                    // Deploy to staging environment
                    sh """
                        python3 deployment/scripts/blue_green_deploy.py \
                            --api-image ${ECR_REPOSITORY}/frontier-api:${IMAGE_TAG} \
                            --web-image ${ECR_REPOSITORY}/frontier-web:${IMAGE_TAG} \
                            --ml-image ${ECR_REPOSITORY}/frontier-ml:${IMAGE_TAG} \
                            --namespace frontier-staging \
                            --timeout 600
                    """
                }
            }
            post {
                success {
                    slackSend(
                        channel: SLACK_CHANNEL,
                        color: 'good',
                        message: ":white_check_mark: Successfully deployed ${APP_NAME} to staging - Version: ${IMAGE_TAG}"
                    )
                }
                failure {
                    slackSend(
                        channel: SLACK_CHANNEL,
                        color: 'danger',
                        message: ":x: Failed to deploy ${APP_NAME} to staging - Version: ${IMAGE_TAG}"
                    )
                }
            }
        }
        
        stage('Integration Tests') {
            when {
                branch 'develop'
            }
            steps {
                script {
                    // Run integration tests against staging
                    sh '''
                        source venv/bin/activate
                        python -m pytest tests/integration/ \
                            --base-url=https://api-staging.frontier.com \
                            --junitxml=integration-test-results.xml
                    '''
                }
            }
            post {
                always {
                    publishTestResults(
                        testResultsPattern: '**/integration-test-results.xml',
                        allowEmptyResults: false
                    )
                }
            }
        }
        
        stage('Performance Tests') {
            when {
                anyOf {
                    branch 'develop'
                    branch 'main'
                }
            }
            steps {
                script {
                    def baseUrl = TARGET_ENV == 'prod' ? 'https://api.frontier.com' : 'https://api-staging.frontier.com'
                    
                    sh """
                        python3 deployment/scripts/performance_test.py \
                            --base-url ${baseUrl} \
                            --test-type load \
                            --concurrent-users 50 \
                            --duration 300 \
                            --output performance-results.json
                    """
                }
            }
            post {
                always {
                    archiveArtifacts(
                        artifacts: '**/performance-results.json',
                        allowEmptyArchive: true
                    )
                }
            }
        }
        
        stage('Deploy to Production') {
            when {
                branch 'main'
            }
            steps {
                script {
                    // Manual approval for production deployment
                    input(
                        message: 'Deploy to production?',
                        ok: 'Deploy',
                        submitterParameter: 'DEPLOYER'
                    )
                    
                    // Deploy to production
                    sh """
                        python3 deployment/scripts/blue_green_deploy.py \
                            --api-image ${ECR_REPOSITORY}/frontier-api:${IMAGE_TAG} \
                            --web-image ${ECR_REPOSITORY}/frontier-web:${IMAGE_TAG} \
                            --ml-image ${ECR_REPOSITORY}/frontier-ml:${IMAGE_TAG} \
                            --namespace frontier \
                            --timeout 900
                    """
                }
            }
            post {
                success {
                    slackSend(
                        channel: SLACK_CHANNEL,
                        color: 'good',
                        message: ":rocket: Successfully deployed ${APP_NAME} to PRODUCTION - Version: ${IMAGE_TAG} - Deployed by: ${env.DEPLOYER}"
                    )
                }
                failure {
                    slackSend(
                        channel: SLACK_CHANNEL,
                        color: 'danger',
                        message: ":rotating_light: PRODUCTION deployment FAILED for ${APP_NAME} - Version: ${IMAGE_TAG}"
                    )
                }
            }
        }
        
        stage('Post-Deployment Validation') {
            when {
                anyOf {
                    branch 'main'
                    branch 'develop'
                }
            }
            steps {
                script {
                    // Health checks
                    def baseUrl = TARGET_ENV == 'prod' ? 'https://api.frontier.com' : 'https://api-staging.frontier.com'
                    
                    sh """
                        # Wait for deployment to stabilize
                        sleep 60
                        
                        # Health check
                        curl -f ${baseUrl}/health || exit 1
                        
                        # Smoke tests
                        python3 -m pytest tests/smoke/ \
                            --base-url=${baseUrl} \
                            --junitxml=smoke-test-results.xml
                    """
                }
            }
            post {
                always {
                    publishTestResults(
                        testResultsPattern: '**/smoke-test-results.xml',
                        allowEmptyResults: false
                    )
                }
            }
        }
    }
    
    post {
        always {
            // Clean up Docker images
            sh '''
                docker image prune -f
                docker system df
            '''
            
            // Archive build artifacts
            archiveArtifacts(
                artifacts: '**/target/*.jar,**/dist/**,**/*.log',
                allowEmptyArchive: true,
                fingerprint: true
            )
        }
        
        success {
            slackSend(
                channel: SLACK_CHANNEL,
                color: 'good',
                message: ":white_check_mark: Build completed successfully for ${APP_NAME} - Branch: ${env.BRANCH_NAME} - Version: ${IMAGE_TAG}"
            )
        }
        
        failure {
            script {
                // Get failed stage information
                def failedStage = currentBuild.description ?: 'Unknown'
                
                slackSend(
                    channel: SLACK_CHANNEL,
                    color: 'danger',
                    message: ":x: Build FAILED for ${APP_NAME} - Branch: ${env.BRANCH_NAME} - Stage: ${failedStage}"
                )
                
                // Auto-rollback on production failure
                if (env.BRANCH_NAME == 'main' && TARGET_ENV == 'prod') {
                    echo "Production deployment failed, initiating rollback..."
                    sh '''
                        python3 deployment/scripts/rollback.py emergency --namespace frontier
                    '''
                }
            }
        }
        
        unstable {
            slackSend(
                channel: SLACK_CHANNEL,
                color: 'warning',
                message: ":warning: Build completed with warnings for ${APP_NAME} - Branch: ${env.BRANCH_NAME}"
            )
        }
        
        cleanup {
            // Clean workspace
            cleanWs()
        }
    }
}
