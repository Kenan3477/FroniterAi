#!/usr/bin/env python3
"""
FrontierAI Autonomous Evolution Startup Script
Starts the complete autonomous evolution system
"""

import os
import sys
import time
import threading
from pathlib import Path

def start_autonomous_frontier():
    """Start the complete FrontierAI autonomous evolution system"""
    
    print("üöÄ STARTING FRONTIERAI AUTONOMOUS EVOLUTION SYSTEM")
    print("=" * 70)
    
    # Check dependencies
    try:
        import git
        import schedule
        import psutil
        print("‚úÖ All dependencies available")
    except ImportError as e:
        print(f"‚ùå Missing dependency: {e}")
        print("üí° Run: pip install -r requirements.txt")
        return
    
    # Start autonomous evolution scheduler
    try:
        from autonomous_scheduler import start_autonomous_system
        print("üß¨ Starting autonomous evolution scheduler...")
        
        # Start in background thread
        scheduler_thread = threading.Thread(target=start_autonomous_system)
        scheduler_thread.daemon = True
        scheduler_thread.start()
        
        print("‚úÖ Autonomous evolution system started")
        
    except Exception as e:
        print(f"‚ö†Ô∏è Could not start autonomous evolution: {e}")
    
    # Start Flask dashboard
    try:
        print("üåê Starting web dashboard...")
        from simple_dashboard import app
        
        # Get port from environment or use default
        port = int(os.environ.get('PORT', 5000))
        host = os.environ.get('HOST', '0.0.0.0')
        
        print(f"üì° Dashboard will be available at http://{host}:{port}")
        print("üéØ Evolution dashboard: http://localhost:{port}/evolution")
        
        # Start Flask app
        app.run(host=host, port=port, debug=False)
        
    except Exception as e:
        print(f"‚ùå Failed to start dashboard: {e}")

def show_system_info():
    """Show system capabilities and status"""
    print("\nüìã FRONTIERAI AUTONOMOUS CAPABILITIES:")
    print("-" * 50)
    print("üß¨ AUTONOMOUS EVOLUTION:")
    print("   ‚Ä¢ Analyzes entire repository for improvements")
    print("   ‚Ä¢ Implements upgrades automatically")
    print("   ‚Ä¢ Tests changes before committing")
    print("   ‚Ä¢ Commits successful upgrades to repository")
    print("   ‚Ä¢ Pushes changes to GitHub automatically")
    
    print("\nüéØ COMPETITIVE INTELLIGENCE:")
    print("   ‚Ä¢ Real-time analysis vs market leaders")
    print("   ‚Ä¢ Automated gap identification")
    print("   ‚Ä¢ Smart upgrade recommendations")
    print("   ‚Ä¢ Market positioning tracking")
    
    print("\nüîç MONITORING & HEALTH:")
    print("   ‚Ä¢ System performance monitoring")
    print("   ‚Ä¢ Real-time health checks")
    print("   ‚Ä¢ Configuration management")
    print("   ‚Ä¢ Evolution history tracking")
    
    print("\n‚ö° CONTINUOUS IMPROVEMENT:")
    print("   ‚Ä¢ Runs evolution cycles every hour")
    print("   ‚Ä¢ Self-improves code quality")
    print("   ‚Ä¢ Adds new features autonomously")
    print("   ‚Ä¢ Enhances architecture automatically")
    
    print("\n" + "=" * 50)

if __name__ == "__main__":
    show_system_info()
    
    print("\nStarting in 3 seconds...")
    time.sleep(3)
    
    try:
        start_autonomous_frontier()
    except KeyboardInterrupt:
        print("\nüõë Shutting down FrontierAI Autonomous Evolution System...")
        print("üëã System stopped by user")
