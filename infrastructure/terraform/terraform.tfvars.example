# Terraform Variables Example
# Copy this file to terraform.tfvars and customize for your environment

# Project Configuration
project_name           = "frontier"
environment           = "dev"  # dev, staging, prod
cost_center           = "engineering"
data_classification   = "internal"

# Network Configuration
vpc_cidr                = "10.0.0.0/16"
public_subnet_cidrs     = ["10.0.1.0/24", "10.0.2.0/24", "10.0.3.0/24"]
private_subnet_cidrs    = ["10.0.10.0/24", "10.0.20.0/24", "10.0.30.0/24"]
database_subnet_cidrs   = ["10.0.100.0/24", "10.0.110.0/24", "10.0.120.0/24"]

# VPC Features
enable_nat_gateway        = true
enable_vpn_gateway        = false
enable_flow_logs          = true
flow_logs_retention_days  = 30

# EKS Configuration
kubernetes_version                = "1.28"
eks_endpoint_private_access       = true
eks_endpoint_public_access        = true
eks_public_access_cidrs          = ["0.0.0.0/0"]  # Restrict this in production
eks_cluster_log_types            = ["api", "audit", "authenticator", "controllerManager", "scheduler"]
log_retention_days               = 30
ssh_key_name                     = "frontier-key"  # Create this key pair in AWS first

# Node Group Configuration
use_spot_instances               = true   # Set to false for production
gpu_instance_size               = "small" # small, medium, large, xlarge
gpu_node_desired_size           = 1
gpu_node_max_size               = 5
gpu_node_min_size               = 0

# Database Configuration
db_engine                       = "postgres"
db_engine_version              = "15.4"
db_instance_class              = "db.t3.micro"  # Use larger for production
db_allocated_storage           = 20
db_max_allocated_storage       = 100
db_name                        = "frontier"
db_username                    = "postgres"
db_port                        = 5432
db_backup_retention_period     = 7
db_backup_window              = "03:00-04:00"
db_maintenance_window         = "sun:04:00-sun:05:00"

# Redis Configuration
redis_node_type                = "cache.t3.micro"  # Use larger for production
redis_snapshot_retention_limit = 5
redis_snapshot_window         = "05:00-06:00"
redis_maintenance_window      = "sun:05:00-sun:06:00"

# Load Balancer Configuration
enable_https_alb               = false  # Set to true and provide certificate_arn for HTTPS
ssl_policy                     = "ELBSecurityPolicy-TLS-1-2-2017-01"
certificate_arn               = ""      # Add your ACM certificate ARN here

# Monitoring Configuration
enable_elk_stack              = true
enable_distributed_tracing    = true
grafana_domain               = "grafana.frontier.local"     # Change to your domain
kibana_domain                = "kibana.frontier.local"      # Change to your domain
jaeger_domain                = "jaeger.frontier.local"      # Change to your domain

# Alert Configuration
alert_email_addresses         = ["admin@example.com"]       # Change to your email

# Security Configuration
kms_deletion_window          = 7  # Use 30 for production

# Data Residency (automatically determined by region, but can be overridden)
# data_residency_requirements = {
#   us = {
#     allowed_regions = ["us-west-2", "us-east-1"]
#     compliance_frameworks = ["SOC2", "HIPAA"]
#   }
#   eu = {
#     allowed_regions = ["eu-west-1", "eu-central-1"] 
#     compliance_frameworks = ["GDPR", "SOC2"]
#   }
#   asia = {
#     allowed_regions = ["ap-southeast-1", "ap-northeast-1"]
#     compliance_frameworks = ["SOC2"]
#   }
# }

# Frontier Module Configuration (adjust based on your AI workload requirements)
# frontier_modules = {
#   visual_design = {
#     cpu_request    = "2000m"
#     memory_request = "4Gi"
#     cpu_limit      = "4000m"
#     memory_limit   = "8Gi"
#     replicas       = 2
#   }
#   self_improvement = {
#     cpu_request    = "1000m"
#     memory_request = "2Gi"
#     cpu_limit      = "2000m"
#     memory_limit   = "4Gi"
#     replicas       = 1
#   }
#   code_quality = {
#     cpu_request    = "1000m"
#     memory_request = "2Gi"
#     cpu_limit      = "2000m"
#     memory_limit   = "4Gi"
#     replicas       = 1
#   }
#   image_generation = {
#     cpu_request    = "2000m"
#     memory_request = "8Gi"
#     cpu_limit      = "4000m"
#     memory_limit   = "16Gi"
#     gpu_request    = "1"
#     replicas       = 1
#   }
#   audio_video = {
#     cpu_request    = "2000m"
#     memory_request = "8Gi"
#     cpu_limit      = "4000m"
#     memory_limit   = "16Gi"
#     gpu_request    = "1"
#     replicas       = 1
#   }
# }
