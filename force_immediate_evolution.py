#!/usr/bin/env python3
"""
ü§ñ FORCE IMMEDIATE AUTONOMOUS EVOLUTION ü§ñ
This will directly run the autonomous code generation and Git commits
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# Import the autonomous system
from smart_main import FrontierAIComplete
import subprocess

def test_autonomous_evolution():
    """Test autonomous code generation and Git commits"""
    print("üî• TESTING AUTONOMOUS CODE EVOLUTION...")
    
    try:
        # Create instance
        frontier = FrontierAIComplete()
        
        print("üìù Generating autonomous improvements...")
        
        # Generate improvement files directly
        improvements = [
            {
                "file": "autonomous_test_1.py",
                "purpose": "Test autonomous competitive analysis enhancement",
                "code": '''#!/usr/bin/env python3
"""
ü§ñ AUTONOMOUS TEST IMPROVEMENT 1 ü§ñ
Generated automatically by Frontier AI autonomous evolution system
This is a test to verify autonomous code generation works
"""

import datetime

class AutonomousTestImprovement:
    def __init__(self):
        self.creation_time = datetime.datetime.now()
        self.improvement_type = "COMPETITIVE_ANALYSIS_ENHANCEMENT"
        
    def test_autonomous_capability(self):
        """Test autonomous improvement capability"""
        return {
            "status": "AUTONOMOUS_IMPROVEMENT_ACTIVE",
            "created_at": self.creation_time.isoformat(),
            "message": "This code was generated autonomously by Frontier AI"
        }

# Autonomous execution
if __name__ == "__main__":
    improvement = AutonomousTestImprovement()
    result = improvement.test_autonomous_capability()
    print("ü§ñ AUTONOMOUS IMPROVEMENT TEST:", result)
'''
            },
            {
                "file": "autonomous_test_2.py", 
                "purpose": "Test autonomous security enhancement",
                "code": '''#!/usr/bin/env python3
"""
üîí AUTONOMOUS TEST IMPROVEMENT 2 üîí
Generated automatically by Frontier AI autonomous evolution system
This is a security enhancement test generated autonomously
"""

import hashlib
import datetime

class AutonomousSecurityTest:
    def __init__(self):
        self.security_level = "AUTONOMOUS_ENHANCED"
        self.scan_time = datetime.datetime.now()
        
    def autonomous_security_check(self):
        """Autonomous security verification"""
        # Generate a unique hash for this autonomous improvement
        content = f"autonomous_security_{self.scan_time.isoformat()}"
        security_hash = hashlib.sha256(content.encode()).hexdigest()
        
        return {
            "autonomous_security_status": "ACTIVE",
            "security_hash": security_hash[:16],
            "generated_at": self.scan_time.isoformat(),
            "improvement_verified": True
        }

# Autonomous execution
if __name__ == "__main__":
    security = AutonomousSecurityTest()
    result = security.autonomous_security_check()
    print("üîí AUTONOMOUS SECURITY TEST:", result)
'''
            }
        ]
        
        for improvement in improvements:
            # Write the file
            with open(improvement["file"], "w") as f:
                f.write(improvement["code"])
            print(f"‚úÖ Created {improvement['file']}")
            
            # Git add
            result = subprocess.run(["git", "add", improvement["file"]], 
                                   capture_output=True, text=True)
            if result.returncode == 0:
                print(f"üìù Staged {improvement['file']}")
            else:
                print(f"‚ùå Failed to stage {improvement['file']}: {result.stderr}")
                continue
                
            # Git commit
            commit_msg = f"ü§ñ AUTONOMOUS IMPROVEMENT: {improvement['purpose']} - Self-generated by Frontier AI"
            result = subprocess.run(["git", "commit", "-m", commit_msg], 
                                   capture_output=True, text=True)
            if result.returncode == 0:
                print(f"‚úÖ COMMITTED {improvement['file']} autonomously!")
                print(f"   Commit message: {commit_msg}")
            else:
                print(f"‚ùå Failed to commit {improvement['file']}: {result.stderr}")
                continue
                
            # Git push
            result = subprocess.run(["git", "push"], capture_output=True, text=True)
            if result.returncode == 0:
                print(f"üöÄ PUSHED {improvement['file']} to repository!")
            else:
                print(f"‚ö†Ô∏è Failed to push {improvement['file']}: {result.stderr}")
        
        # Show recent commits
        print("\nüîó RECENT COMMITS:")
        result = subprocess.run(["git", "log", "--oneline", "-5"], 
                               capture_output=True, text=True)
        if result.returncode == 0:
            for line in result.stdout.strip().split('\n'):
                if line:
                    icon = "ü§ñ" if "AUTONOMOUS" in line else "üë§"
                    print(f"  {icon} {line}")
        
        print("\nüéâ AUTONOMOUS EVOLUTION TEST COMPLETE!")
        print("‚úÖ Check your GitHub repository for the autonomous commits!")
        
    except Exception as e:
        print(f"‚ùå AUTONOMOUS EVOLUTION TEST FAILED: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    test_autonomous_evolution()
